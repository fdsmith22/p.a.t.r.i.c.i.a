name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [develop]

jobs:
  quality-checks:
    name: Code Quality and Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: false

      - name: Check code formatting
        run: npm run format:check
        continue-on-error: false

      - name: Run type checking
        run: npm run typecheck
        continue-on-error: false

      - name: Run unit tests
        run: npm test -- --coverage
        env:
          CI: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: coverage/

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check bundle size
        run: |
          echo "Checking bundle size..."
          ls -lh dist/

      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-checks

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "MONGODB_URI=mongodb://localhost:27017/neurlyn-test" >> .env

      - name: Run API tests
        run: npm run test:api
        continue-on-error: true
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/neurlyn-test

      - name: Test assessment variations
        run: node scripts/test-assessment-variations.js
        env:
          NODE_ENV: test

  lighthouse:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: ./lighthouserc.js
          uploadArtifacts: true
          temporaryPublicStorage: true

  check-conflicts:
    name: Check for Conflicts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for merge conflicts
        run: |
          git diff --check
          if git grep -E '<<<<<<< |======= |>>>>>>> ' -- . ':(exclude).github'; then
            echo "Merge conflict markers found!"
            exit 1
          fi

      - name: Check for console.logs
        run: |
          if grep -r "console\.log" --include="*.js" --include="*.ts" --exclude-dir=node_modules --exclude-dir=.github --exclude-dir=scripts .; then
            echo "Warning: console.log statements found in code"
          fi

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk Security Check
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Check for outdated packages
        run: |
          npm outdated || true

      - name: License compatibility check
        run: |
          npx license-checker --production --summary