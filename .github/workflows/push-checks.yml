name: Push Checks

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 ESLint Check
        run: npm run lint
        continue-on-error: false

      - name: 💅 Prettier Check
        run: npm run format:check
        continue-on-error: false

      - name: 📝 TypeScript Check
        run: npm run typecheck
        continue-on-error: false

      - name: 🔍 Find console.log statements
        run: |
          echo "Checking for console.log statements..."
          if grep -r "console\.log" --include="*.js" --include="*.ts" --exclude-dir=node_modules --exclude-dir=.github .; then
            echo "::warning::console.log statements found in code"
          fi

      - name: 🎨 CSS Validation
        run: |
          echo "Checking CSS files for issues..."
          for file in $(find styles -name "*.css" 2>/dev/null || true); do
            # Check for excessive !important usage
            IMPORTANT_COUNT=$(grep -c '!important' "$file" || echo "0")
            if [ "$IMPORTANT_COUNT" -gt 30 ]; then
              echo "::warning file=$file::File has $IMPORTANT_COUNT !important declarations (threshold: 30)"
            fi

            # Check for potential mobile issues
            if grep -E 'width:\s*[0-9]{3,}px' "$file" | grep -v 'max-width' | grep -v '@media'; then
              echo "::warning file=$file::Fixed widths >100px found outside media queries"
            fi
          done

      - name: 📄 HTML Validation
        run: |
          echo "Checking HTML files..."
          for file in $(find . -name "*.html" -not -path "./node_modules/*" 2>/dev/null || true); do
            # Check for missing alt attributes
            if grep -E '<img[^>]*>' "$file" | grep -v 'alt=' > /dev/null 2>&1; then
              echo "::warning file=$file::Images missing alt attributes"
            fi

            # Check for deprecated tags
            if grep -E '<(font|center|marquee|blink)' "$file" > /dev/null 2>&1; then
              echo "::warning file=$file::Deprecated HTML tags found"
            fi
          done

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run Unit Tests
        run: npm test -- --coverage
        env:
          CI: true
          NODE_ENV: test

      - name: 📊 Upload Coverage
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: coverage/

      - name: 💾 Test Database Connections
        run: |
          echo "Testing database connection..."
          node -e "
          const mongoose = require('mongoose');
          mongoose.connect('mongodb://localhost:27017/test')
            .then(() => { console.log('✅ Database connection successful'); process.exit(0); })
            .catch(err => { console.error('❌ Database connection failed:', err); process.exit(1); });
          "
        continue-on-error: true

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build Application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📊 Analyze Bundle Size
        run: |
          echo "Bundle Analysis:"
          echo "=================="
          if [ -d "dist" ]; then
            echo "Total size: $(du -sh dist | cut -f1)"
            echo ""
            echo "Largest files:"
            find dist -type f -exec du -h {} + | sort -rh | head -10

            # Warn if bundle is too large
            TOTAL_SIZE=$(du -sb dist | cut -f1)
            if [ "$TOTAL_SIZE" -gt 5242880 ]; then  # 5MB
              echo "::warning::Bundle size exceeds 5MB ($(($TOTAL_SIZE/1048576))MB)"
            fi
          fi

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: 🔒 NPM Audit
        run: |
          npm audit --audit-level=moderate || true
          npm audit --json > audit-report.json || true

      - name: 🔍 Check for Secrets
        run: |
          echo "Scanning for potential secrets..."
          # Check for common secret patterns
          if grep -rE "(api[_-]?key|apikey|secret|password|token|private[_-]?key|aws[_-]?access)" \
             --include="*.js" --include="*.ts" --include="*.json" \
             --exclude-dir=node_modules --exclude-dir=.git \
             --exclude="package-lock.json" . | \
             grep -v "process.env" | grep -v "//" | grep -v "#"; then
            echo "::error::Potential secrets found in code!"
            exit 1
          fi

      - name: 📋 License Check
        run: |
          npx license-checker --production --summary || true

  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: build-verification

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for Performance Test
        run: npm run build

      - name: 🚀 Start Server
        run: |
          npm start &
          sleep 5
        env:
          PORT: 3000

      - name: 🎯 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

      - name: 🔧 Check for Memory Leaks
        run: |
          echo "Checking for potential memory leaks..."
          # Basic memory leak detection patterns
          if grep -r "setInterval" --include="*.js" . | grep -v "clearInterval"; then
            echo "::warning::setInterval without clearInterval detected"
          fi
          if grep -r "addEventListener" --include="*.js" . | grep -v "removeEventListener"; then
            echo "::warning::addEventListener without removeEventListener detected"
          fi

  mobile-compatibility:
    name: Mobile Compatibility Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📱 Check Mobile CSS
        run: |
          echo "Checking mobile responsiveness..."

          # Check for viewport meta tag
          if ! grep -q "viewport" index.html; then
            echo "::error::Missing viewport meta tag in index.html"
          fi

          # Check for media queries
          MEDIA_QUERY_COUNT=$(grep -r "@media" styles/ --include="*.css" | wc -l || echo "0")
          if [ "$MEDIA_QUERY_COUNT" -lt 5 ]; then
            echo "::warning::Only $MEDIA_QUERY_COUNT media queries found - might need more responsive styles"
          fi

          # Check for mobile-specific CSS file
          if [ ! -f "styles/neurlyn-mobile.css" ] && [ ! -f "styles/neurlyn-mobile-override.css" ]; then
            echo "::warning::No dedicated mobile CSS file found"
          fi

      - name: 🖼️ Check Image Optimization
        run: |
          echo "Checking images..."
          for img in $(find . -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" \) -not -path "./node_modules/*" 2>/dev/null || true); do
            SIZE=$(stat -f%z "$img" 2>/dev/null || stat -c%s "$img" 2>/dev/null || echo "0")
            if [ "$SIZE" -gt 524288 ]; then  # 512KB
              echo "::warning file=$img::Image larger than 512KB ($(($SIZE/1024))KB)"
            fi
          done

  dependency-management:
    name: Dependency Management
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: 📦 Check for Outdated Packages
        run: |
          echo "Checking for outdated packages..."
          npm outdated || true

      - name: 🔄 Check for Unused Dependencies
        run: |
          npx depcheck --json > depcheck-report.json || true
          if [ -s depcheck-report.json ]; then
            echo "::warning::Unused dependencies detected. Run 'npx depcheck' for details"
          fi

      - name: 📊 Generate Dependency Report
        run: |
          echo "## Dependency Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Package Count" >> $GITHUB_STEP_SUMMARY
          echo "- Total: $(npm ls --depth=0 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Production: $(npm ls --prod --depth=0 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Development: $(npm ls --dev --depth=0 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY

  notification:
    name: Status Notification
    runs-on: ubuntu-latest
    needs: [code-quality, test-suite, build-verification, security-scan, performance-check, mobile-compatibility, dependency-management]
    if: always()

    steps:
      - name: 📊 Generate Summary
        run: |
          echo "## Push Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Suite: ${{ needs.test-suite.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Verification: ${{ needs.build-verification.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Check: ${{ needs.performance-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile Compatibility: ${{ needs.mobile-compatibility.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Management: ${{ needs.dependency-management.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Commit" >> $GITHUB_STEP_SUMMARY
          echo "- SHA: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Author: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY